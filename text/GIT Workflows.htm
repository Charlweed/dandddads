<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>Git Workflows</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:24.0pt;
font-family:"Times New Roman",serif'>GIT Workflows</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>A Git Workflow is a recipe or
recommendation for how to use Git to accomplish work in a consistent and
productive manner. Git workflows encourage users to leverage Git effectively
and consistently. Git offers a lot of flexibility in how users manage changes.
Given Git's focus on flexibility, there is no standardized process on how to
interact with Git. When working with a team on a Git managed project, it’s
important to make sure the team is all in agreement on how the flow of changes
will be applied. To ensure the team is on the same page, an agreed upon Git
workflow should be developed or selected.&nbsp;There are several publicized Git
workflows that may be a good fit for your team. Here, we’ll be discussing some
of these workflow options.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The array of possible workflows can make
it hard to know where to begin when implementing Git in the workplace. This
page provides a starting point by surveying the most common Git workflows for
software teams.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>As you read through, remember that these
workflows are designed to be guidelines rather than concrete rules. We want to
show you what’s possible, so you can mix and match aspects from different
workflows to suit your individual needs.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>What is a successful Git workflow? </span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>When evaluating a workflow for your team,
it's most important that you consider your team’s culture. You want the workflow
to enhance the effectiveness of your team and not be a burden that limits
productivity. Some things to consider when evaluating a Git workflow are:</span></p>

<ul type=disc>
 <li class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
     font-family:"Times New Roman",serif'>Does this workflow scale with team
     size?</span></li>
 <li class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
     font-family:"Times New Roman",serif'>Is it easy to undo mistakes and
     errors with this workflow?</span></li>
 <li class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
     font-family:"Times New Roman",serif'>Does this workflow impose any new
     unnecessary cognitive overhead to the team?</span></li>
</ul>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>Centralized Workflow</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="git workflow | Central and local repositories"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The Centralized Workflow is a great Git
workflow for teams transitioning from SVN. Like Subversion, the Centralized
Workflow uses a central repository to serve as the single point-of-entry for
all changes to the project. Instead of </span><span style='font-size:10.0pt;
font-family:"Courier New"'>trunk</span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>, the default development branch is called
</span><span style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> and all changes
are committed into this branch. This workflow doesn’t require any other
branches besides </span><span style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'>.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Transitioning to a distributed version
control system may seem like a daunting task, but you don’t have to change your
existing workflow to take advantage of Git. Your team can develop projects in
the exact same way as they do with Subversion.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>However, using Git to power your
development workflow presents a few advantages over SVN. First, it gives every
developer their own local copy of the entire project. This isolated environment
lets each developer work independently of all other changes to a project - they
can add commits to their local repository and completely forget about upstream
developments until it's convenient for them.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Second, it gives you access to Git’s
robust branching and merging model. Unlike SVN, Git branches are designed to be
a fail-safe mechanism for integrating code and sharing changes between
repositories. The Centralized Workflow is similar to other workflows in its
utilization of a remote server-side hosted repository that developers push and
pull form. Compared to other workflows, the Centralized Workflow has no defined
pull request or forking patterns. A Centralized Workflow is generally better
suited for teams migrating from SVN to Git and smaller size teams.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>How it works</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Developers start by cloning the central
repository. In their own local copies of the project, they edit files and
commit changes as they would with SVN; however, these new commits are stored
locally - they’re completely isolated from the central repository. This lets developers
defer synchronizing upstream until they’re at a convenient break point.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>To publish changes to the official
project, developers &quot;push&quot; their local </span><span style='font-size:
10.0pt;font-family:"Courier New"'>master</span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> branch to the central repository. This is
the equivalent of </span><span style='font-size:10.0pt;font-family:"Courier New"'>svn
commit</span><span style='font-size:12.0pt;font-family:"Times New Roman",serif'>,
except that it adds all of the local commits that aren’t already in the central
</span><span style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Initialize the central repository</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflow: Initialize Central Bare Repository"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>First, someone needs to create the central
repository on a server. If it’s a new project, you can initialize an empty
repository. Otherwise, you’ll need to import an existing Git or SVN repository.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Central repositories should always be bare
repositories (they shouldn’t have a working directory), which can be created as
follows:</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:10.0pt;
font-family:"Courier New"'>ssh user@host git init --bare /path/to/repo.git</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Be sure to use a valid SSH username for </span><span
style='font-size:10.0pt;font-family:"Courier New"'>user</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'>, the domain or IP
address of your server for </span><span style='font-size:10.0pt;font-family:
"Courier New"'>host</span><span style='font-size:12.0pt;font-family:"Times New Roman",serif'>,
and the location where you'd like to store your repo for </span><span
style='font-size:10.0pt;font-family:"Courier New"'>/path/to/repo.git</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'>. Note that the </span><span
style='font-size:10.0pt;font-family:"Courier New"'>.git</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> extension is
conventionally appended to the repository name to indicate that it’s a bare
repository.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Hosted central repositories</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Central repositories are often created
through 3rd party Git hosting services like <a
href="https://bitbucket.org/product"><span style='color:blue'>Bitbucket Cloud</span></a>
or <a href="https://bitbucket.org/product/enterprise"><span style='color:blue'>Bitbucket
Server</span></a>. The process of initializing a bare repository discussed
above is handled for you by the hosting service. The hosting service will then
provide an address for the central repository to access from your local
repository.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Clone the central repository</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Next, each developer creates a local copy
of the entire project. This is accomplished via the </span><span
style='font-size:10.0pt;font-family:"Courier New"'><a
href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone"><span
style='color:blue'>git clone</span></a></span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> command:</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:10.0pt;
font-family:"Courier New"'>git clone ssh://user@host/path/to/repo.git</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>When you clone a repository, Git
automatically adds a shortcut called </span><span style='font-size:10.0pt;
font-family:"Courier New"'>origin</span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> that points back to the “parent”
repository, under the assumption that you'll want to interact with it further
on down the road.&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Make changes and commit</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Once the repository is cloned locally, a
developer can make changes using the standard Git commit process: edit, stage,
and commit. If you’re not familiar with the staging area, it’s a way to prepare
a commit without having to include every change in the working directory. This
lets you create highly focused commits, even if you’ve made a lot of local
changes.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git status #
View the state of the repo</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git add
&lt;some-file&gt; # Stage a file</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git commit #
Commit a file&lt;/some-file&gt;</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Remember that since these commands create
local commits, John can repeat this process as many times as he wants without
worrying about what’s going on in the central repository. This can be very
useful for large features that need to be broken down into simpler, more atomic
chunks.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Push new commits to central repository</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Once the local repository has new changes
committed. These change will need to be pushed to share with other developers
on the project.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git push
origin master</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>This command will push the new committed
changes to the central repository. When pushing changes to the central
repository, it is possible that updates from another developer have been
previously pushed that contain code which conflict with the intended push
updates. Git will output a message indicating this conflict. In this situation,
</span><span style='font-size:10.0pt;font-family:"Courier New"'>git pull</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> will first need
to be executed. This conflict scenario will be expanded on in the following
section.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Managing conflicts</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The central repository represents the
official project, so its commit history should be treated as sacred and
immutable. If a developer’s local commits diverge from the central repository,
Git will refuse to push their changes because this would overwrite official
commits.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Managing conflicts"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Before the developer can publish their
feature, they need to fetch the updated central commits and rebase their
changes on top of them. This is like saying, “I want to add my changes to what
everyone else has already done.” The result is a perfectly linear history, just
like in traditional SVN workflows.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>If local changes directly conflict with
upstream commits, Git will pause the rebasing process and give you a chance to
manually resolve the conflicts. The nice thing about Git is that it uses the
same </span><span style='font-size:10.0pt;font-family:"Courier New"'>git status</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> and </span><span
style='font-size:10.0pt;font-family:"Courier New"'>git add</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> commands for both
generating commits and resolving merge conflicts. This makes it easy for new
developers to manage their own merges. Plus, if they get themselves into
trouble, Git makes it very easy to abort the entire rebase and try again (or go
find help).</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>Example</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Let’s take a general example at how a
typical small team would collaborate using this workflow. We’ll see how two
developers, John and Mary, can work on separate features and share their
contributions via a centralized repository.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>John works on his feature</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Edit Stage Commit Feature Process"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>In his local repository, John can develop
features using the standard Git commit process: edit, stage, and commit.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Remember that since these commands create
local commits, John can repeat this process as many times as he wants without
worrying about what’s going on in the central repository.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Mary works on her feature</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Edit Stage Commit Feature"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Meanwhile, Mary is working on her own
feature in her own local repository using the same edit/stage/commit process.
Like John, she doesn’t care what’s going on in the central repository, and she <i>really</i>
doesn’t care what John is doing in his local repository, since all local
repositories are <i>private</i>.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>John publishes his feature</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Publish Feature"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Once John finishes his feature, he should
publish his local commits to the central repository so other team members can
access it. He can do this with the </span><span style='font-size:10.0pt;
font-family:"Courier New"'><a
href="https://www.atlassian.com/git/tutorials/syncing/git-push"><span
style='color:blue'>git push</span></a></span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> command, like so:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git push
origin master</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Remember that </span><span
style='font-size:10.0pt;font-family:"Courier New"'>origin</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> is the remote
connection to the central repository that Git created when John cloned it. The </span><span
style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> argument tells
Git to try to make the </span><span style='font-size:10.0pt;font-family:"Courier New"'>origin</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'>’s </span><span
style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch look like
his local </span><span style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch. Since the
central repository hasn’t been updated since John cloned it, this won’t result
in any conflicts and the push will work as expected.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Mary tries to publish her feature</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Push Command Error"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Let’s see what happens if Mary tries to
push her feature after John has successfully published his changes to the
central repository. She can use the exact same push command:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git push
origin master</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>But, since her local history has diverged
from the central repository, Git will refuse the request with a rather verbose
error message:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>error: failed
to push some refs to '/path/to/repo.git'</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>hint: Updates
were rejected because the tip of your current branch is behind</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>hint: its
remote counterpart. Merge the remote changes (e.g. 'git pull')</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>hint: before
pushing again.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>hint: See the
'Note about fast-forwards' in 'git push --help' for details.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>This prevents Mary from overwriting
official commits. She needs to pull John’s updates into her repository,
integrate them with her local changes, and then try again.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Mary rebases on top of John’s commit(s)</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Git Pull Rebase"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Mary can use </span><span
style='font-size:10.0pt;font-family:"Courier New"'><a
href="https://www.atlassian.com/git/tutorials/syncing/git-pull"><span
style='color:blue'>git pull</span></a></span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> to incorporate upstream changes into her
repository. This command is sort of like </span><span style='font-size:10.0pt;
font-family:"Courier New"'>svn update</span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>—it pulls the entire upstream commit
history into Mary’s local repository and tries to integrate it with her local
commits:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git pull
--rebase origin master</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The </span><span style='font-size:10.0pt;
font-family:"Courier New"'>--rebase</span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> option tells Git to move all of Mary’s
commits to the tip of the </span><span style='font-size:10.0pt;font-family:
"Courier New"'>master</span><span style='font-size:12.0pt;font-family:"Times New Roman",serif'>
branch after synchronising it with the changes from the central repository, as
shown below:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git workflows: Rebasing to Master"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The pull would still work if you forgot
this option, but you would wind up with a superfluous “merge commit” every time
someone needed to synchronize with the central repository. For this workflow,
it’s always better to rebase instead of generating a merge commit.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Mary resolves a merge conflict</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Rebasing on Commits"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Rebasing works by transferring each local
commit to the updated </span><span style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch one at a
time. This means that you catch merge conflicts on a commit-by-commit basis
rather than resolving all of them in one massive merge commit. This keeps your
commits as focused as possible and makes for a clean project history. In turn,
this makes it much easier to figure out where bugs were introduced and, if
necessary, to roll back changes with minimal impact on the project.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>If Mary and John are working on unrelated
features, it’s unlikely that the rebasing process will generate conflicts. But
if it does, Git will pause the rebase at the current commit and output the
following message, along with some relevant instructions:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>CONFLICT
(content): Merge conflict in &lt;some-file&gt;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git workflows: Conflict Resolution"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The great thing about Git is that <i>anyone</i>
can resolve their own merge conflicts. In our example, Mary would simply run a </span><span
style='font-size:10.0pt;font-family:"Courier New"'><a
href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-status"><span
style='color:blue'>git status</span></a></span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> to see where the problem is. Conflicted
files will appear in the Unmerged paths section:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'># Unmerged
paths:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'># (use
&quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'># (use
&quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>#</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'># both
modified: &lt;some-file&gt;</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Then, she’ll edit the file(s) to her
liking. Once she’s happy with the result, she can stage the file(s) in the
usual fashion and let </span><span style='font-size:10.0pt;font-family:"Courier New"'><a
href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><span
style='color:blue'>git rebase</span></a></span><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'> do the rest:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git add
&lt;some-file&gt;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git rebase
--continue</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>And that’s all there is to it. Git will
move on to the next commit and repeat the process for any other commits that
generate conflicts.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>If you get to this point and realize and
you have no idea what’s going on, don’t panic. Just execute the following
command and you’ll be right back to where you started:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git rebase
--abort</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Mary successfully publishes her feature</span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><img width=32 height=32 src="GIT%20Workflows_files/image001.png"
alt="Git Workflows: Synchronize Central Repo"></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>After she’s done synchronizing with the
central repository, Mary will be able to publish her changes successfully:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New"'>git push
origin master</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman",serif'>Where to go from here</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>As you can see, it’s possible to replicate
a traditional Subversion development environment using only a handful of Git
commands. This is great for transitioning teams off of SVN, but it doesn’t
leverage the distributed nature of Git.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The Centralized Workflow is great for
small teams. The conflict resolution process detailed above can form a
bottleneck as your team scales in size. If your team is comfortable with the
Centralized Workflow but wants to streamline its collaboration efforts, it's
definitely worth exploring the benefits of the <a
href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"><span
style='color:blue'>Feature Branch Workflow</span></a>. By dedicating an
isolated branch to each feature, it’s possible to initiate in-depth discussions
around new additions before integrating them into the official project.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>Other common workflows</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The Centralized Workflow is essentially a
building block for other Git workflows. Most popular Git workflows will have
some sort of centralized repo that individual developers will push and pull
from. Below we will briefly discuss some other popular Git workflows. These
extended workflows offer more specialized patterns in regard to managing branches
for feature development, hot fixes, and eventual release.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>Feature branching</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>Feature Branching is a logical extension
of Centralized Workflow. The core idea behind the <a
href="http://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"><span
style='color:blue'>Feature Branch Workflow</span></a> is that all feature
development should take place in a dedicated branch instead of the </span><span
style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch. This
encapsulation makes it easy for multiple developers to work on a particular
feature without disturbing the main codebase. It also means the </span><span
style='font-size:10.0pt;font-family:"Courier New"'>master</span><span
style='font-size:12.0pt;font-family:"Times New Roman",serif'> branch should
never contain broken code, which is a huge advantage for continuous integration
environments.&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:18.0pt;
font-family:"Times New Roman",serif'>Gitflow Workflow</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman",serif'>The <a
href="http://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"><span
style='color:blue'>Gitflow Workflow</span></a> was first published in a highly
regarded 2010 blog post from&nbsp;<a
href="http://nvie.com/posts/a-successful-git-branching-model/"><span
style='color:blue'>Vincent Driessen at nvie</span></a>.&nbsp;The Gitflow
Workflow defines a strict branching model designed around the project release.
This workflow doesn’t add any new concepts or commands beyond what’s required
for the Feature Branch Workflow. Instead, it assigns very specific roles to
different branches and defines how and when they should interact.&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
